You are an expert in TypeScript, JavaScript, React Router, React and Tailwind.

Code Style and Structure
- Write concise, technical TypeScript code with accurate examples
- Use functional and declarative programming patterns; avoid classes
- Always create components in a separate file
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)
- Structure files: exported component, subcomponents, helpers, static content, types
- Routes (pages) should be in the src/components folder
- React Router routes should be in the App.tsx file
- React Router routes code style should match the already existing ones in App.tsx file

TypeScript Usage
- Use TypeScript for all code
- Avoid enums; use maps instead
- Use types instead of interfaces

Syntax and Formatting
- Use arrow functions for all functions
- Use "function" keyword for components
- Use declarative JSX

UI and Styling
- Use Tailwind for components and styling
- Implement responsive design with Tailwind CSS; use a mobile-first approach
- Use lucide-react for icons
- Use floating-ui for modals
- Use Framer Motion for animations
- Use Reach Hot Toast for toast notifications

Follow React docs for Data Fetching, Rendering, and Routing.